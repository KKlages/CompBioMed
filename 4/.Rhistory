install.packages(‘snpStats’)
install.packages(snpStats)
install.packages("snpStats")
R.version.string
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("snpStats")
source("~/.active-rstudio-document")
source("F:/CoBi/BioMed/Tutorial/3/Solution_3.R")
install.packages("survival")
source("F:/CoBi/BioMed/Tutorial/3/Solution_3.R")
install.packages("R.utils")
install.packages("R.utils")
source("F:/CoBi/BioMed/Tutorial/3/Solution_3.R")
prog_geneset = survGroup(maf = laml, top = 20, geneSetSize = 2, time = "days_to_last_followup", Status = "Overall_Survival_Status", verbose = FALSE)
print(prog_geneset)
View(prog_geneset)
prog_geneset = survGroup(maf = laml, top = 20, geneSetSize = 1, time = "days_to_last_followup", Status = "Overall_Survival_Status", verbose = FALSE)
print(prog_geneset)
a = mafSurvival(maf = laml, genes = 'TP53', time = 'days_to_last_followup', Status = 'Overall_Survival_Status', isTCGA = TRUE)
a = mafSurvival(maf = laml, genes = 'DNMT3A ', time = 'days_to_last_followup', Status = 'Overall_Survival_Status', isTCGA = TRUE)
a = mafSurvival(maf = laml, genes = 'RUNX1', time = 'days_to_last_followup', Status = 'Overall_Survival_Status', isTCGA = TRUE)
?histogram
histogram(x, data = NULL, formula = data)
require(stats)
histogram(x, data = NULL, formula = data)
P_values = prog_geneset$P_value
hist(P_values)
P_values
# Create a more informative histogram
hist(P_values,
breaks = 10,
main = "Distribution of P-values for Gene Mutation Survival Analysis",
xlab = "P-value",
ylab = "Frequency",
col = "lightblue",
border = "black")
# Add a vertical line for p=0.05 significance threshold
abline(v = 0.05, col = "red", lty = 2, lwd = 2)
# Add a legend
legend("topright",
legend = "p=0.05 threshold",
col = "red",
lty = 2,
lwd = 2)
# Create a more informative histogram
hist(P_values,
breaks = 10,
main = "Distribution of P-values for Gene Mutation Survival Analysis",
xlab = "P-value",
ylab = "Frequency",
col = "lightblue",
border = "black")
# Add a vertical line for p=0.05 significance threshold
abline(v = 0.05, col = "red", lty = 2, lwd = 2)
# Add a legend
legend("topright",
legend = "p=0.05 threshold",
col = "red",
lty = 2,
lwd = 2)
a = mafSurvival(maf = laml, genes = 'TP53', time = 'days_to_last_followup', Status = 'Overall_Survival_Status', isTCGA = TRUE)
a = mafSurvival(maf = laml, genes = 'TP53', time = 'days_to_last_followup', Status = 'Overall_Survival_Status', isTCGA = TRUE)
?p.adjust
P_values_bo = p.adjust(P_values, method = p.adjust.methods, n = length(P_values))
P_values_bo = p.adjust(P_values, method = "bonferroni", n = length(P_values))
P_values_hochberg = p.adjust(P_values, method = "hochberg", n = length(P_values))
# Perform both adjustments
bonf_adj = p.adjust(P_values, method = "bonferroni")
bh_adj = p.adjust(P_values, method = "BH")
# Create a comparison table
results_table = data.frame(
Gene = prog_geneset$Gene_combination,
Original_P = P_values,
Bonferroni_adj = bonf_adj,
BH_adj = bh_adj
)
# Sort by original p-value
results_table = results_table[order(results_table$Original_P),]
View(results_table)
read.GenBank(’AY274119.3’, species.names = TRUE, as.character = TRUE)
read.GenBank("AY274119.3", species.names = TRUE, as.character = TRUE)
###########################################
install.packages("rentrez")
library("rentrez")
read.GenBank("AY274119.3", species.names = TRUE, as.character = TRUE)
library(rentrez)
read.GenBank("AY274119.3", species.names = TRUE, as.character = TRUE)
?read.GenBank
??read.GenBank
??read.GenBank
sars_search <- entrez_search(db="nucleotide", term="AY274119.3")
sars_seq <- entrez_fetch(db="nucleotide", id=sars_search$ids, rettype="fasta", retmode="text")
cat(substr(sars_seq, 1, 500))
print(sars_seq)
?entrez_fetch
sars_seq <- entrez_fetch(db="nucleotide", id=sars_search$ids, rettype="native", retmode="text")
sars_seq
sars_seq <- entrez_fetch(db="nucleotide", id=sars_search$ids, rettype="fasta", retmode="text")
sars_seq
class(sars_seq)
type(sars_seq)
seq_lines <- strsplit(sars_seq, "\n")[[1]]
seq_lines <- seq_lines[!grepl("^>", seq_lines)]
seq_string <- paste(seq_lines, collapse="")
install.packages("ORFik")
BiocManager::install("ORFik")
?findORFs()
library(ORFik)
?findORFs()
findORFs(
seq_string,
longestORF = TRUE,
minimumLength = 100
)
ORF_seq = seq_string[21492:25259]
length(ORF_seq)
DNAString(ORF_seq)
?DNAString
dna = DNAString(x =ORF_seq)
print(ORF_seq)
print(seq_string[21492:25259])
view(seq_string)
print(seq_string)
ORF_seq = substr(seq_string, start=21492, stop=25259)
length(ORF_seq)
dna = DNAString(x =ORF_seq)
aa = translate(dna)
aa
setwd("F:/CoBi/BioMed/Tutorial/4")
#################################################
readRDS(viruses.rds)
viruses <- readRDS("F:/CoBi/BioMed/Tutorial/4/viruses.rds")
viruses <- readRDS("F:/CoBi/BioMed/Tutorial/4/viruses.rds")
cov_aa = translate(dna)
View(viruses)
df_viruses = data.frame(viruses)
View(df_viruses)
human_cov = df_viruses$Human.CoV.OC43
print(human_cov)
count(cov_aa!=human_cov)
View(aa)
human_cov <- AAString(human_cov)
length(cov_aa)
length(human_cov)
matches <- sum(strsplit(cov_trimmed, "")[[1]] == strsplit(human_trimmed, "")[[1]])
alignment <- pairwiseAlignment(cov_aa, human_cov)
BiocManager::install("pwalign")
library(pwalign)
alignment <- pairwiseAlignment(cov_aa, human_cov)
print(alignment@score)
# Get alignment statistics
print("Alignment Statistics:")
print(paste("Score:", alignment@score))
print(paste("Number of matches:", alignment@nmatch))
# Visualize first part of the alignment
pattern_seq <- as.character(alignment@pattern)
subject_seq <- as.character(alignment@subject)
# Show first 50 positions of alignment
cat("Pattern: ", substr(pattern_seq, 1, 50), "\n")
cat("Subject: ", substr(subject_seq, 1, 50), "\n")
# Create a simple match/mismatch visualization
matches <- strsplit(pattern_seq, "")[[1]] == strsplit(subject_seq, "")[[1]]
match_string <- ifelse(matches, "|", " ")
cat("Match:   ", paste(match_string[1:50], collapse=""), "\n")
differences <- sum(seq1_chars != seq2_chars, na.rm = FALSE)
# Get sequence lengths
len_seq1 <- nchar(as.character(cov_aa))
len_seq2 <- nchar(as.character(human_cov))
# Get the maximum length for comparison
max_len <- max(len_seq1, len_seq2)
# Convert sequences to character vectors
seq1_chars <- strsplit(as.character(cov_aa), "")[[1]]
seq2_chars <- strsplit(as.character(human_cov), "")[[1]]
# Pad shorter sequence with NA to make lengths equal
if(len_seq1 < max_len) {
seq1_chars <- c(seq1_chars, rep(NA, max_len - len_seq1))
} else if(len_seq2 < max_len) {
seq2_chars <- c(seq2_chars, rep(NA, max_len - len_seq2))
}
# Count differences (including length differences as mismatches)
differences <- sum(seq1_chars != seq2_chars, na.rm = FALSE)
differences
seq1 <- human_cov
seq2 <- cov_aa
min_length <- min(width(seq1), width(seq2))
min_length <- min(nchar(cov_aa), nchar(cov_aa))
# Truncate the longer sequence to the length of the shorter one
seq1_sub <- subseq(seq1, start = 1, end = min_length)
seq2_sub <- subseq(seq2, start = 1, end = min_length)
# Compare substrings
identical(seq1_sub, seq2_sub)
# Truncate the longer sequence to the length of the shorter one
seq1_sub <- subseq(cov_aa, start = 1, end = min_length)
seq2_sub <- subseq(cov_aa, start = 1, end = min_length)
# Compare substrings
identical(seq1_sub, seq2_sub)
# Get the lengths using nchar
min_length <- min(nchar(cov_aa), nchar(human_cov))
# Truncate the longer sequence to the length of the shorter one
seq1_sub <- subseq(cov_aa, start = 1, end = min_length)
seq2_sub <- subseq(human_cov, start = 1, end = min_length)
# Compare substrings
identical(seq1_sub, seq2_sub)
# Compare substrings
identical(seq1_sub, seq2_sub)
###
library(msa)
install.packages("msa")
BiocManager::install("msa")
library(msa)
?msa
msa(cov_aa, human_cov)
seq_set <- AAStringSet(list("cov_aa" = cov_aa, "human_cov" = human_cov))
alignment <- msa(seq_set, method = "ClustalW")
msaPrettyPrint(alignment)
ali_plot = msaPrettyPrint(alignment)
#####
install.packages("phangorn")
library(phangorn)
phyDat_obj = as.phyDat(alignment)
dist.ml(phyDat_obj)
dist = dist.ml(phyDat_obj)
NJ(dist)
print(viruses)
seq_set <- AAStringSet(list("cov_aa" = cov_aa, viruses))
virus_sequences <- as.list(as.data.frame(t(viruses)))
virus_sequences <- lapply(virus_sequences, AAString)
