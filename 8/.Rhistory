install.packages(‘snpStats’)
install.packages(snpStats)
install.packages("snpStats")
R.version.string
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("snpStats")
source("~/.active-rstudio-document")
source("F:/CoBi/BioMed/Tutorial/4/Übung4.R")
install.packages('R.utils')
options(device = "windows")  # For Windows
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("maftools")
library(maftools)
laml.maf = system.file('extdata', 'tcga_laml.maf.gz', package = 'maftools')
laml.clin = system.file('extdata', 'tcga_laml_annot.tsv', package = 'maftools')
laml = read.maf(maf = laml.maf, clinicalData = laml.clin)
samplesummary =getSampleSummary(laml)
genesummary=getGeneSummary(laml)
clinicalsummary =getClinicalData(laml)
plotmafSummary(maf = laml)
install.packages("R.utils")
source("F:/CoBi/BioMed/Tutorial/4/Übung4.R")
install.packages("R.utils")
source("F:/CoBi/BioMed/Tutorial/7/Solution7.R")
setwd("F:/CoBi/BioMed/Tutorial/8")
source("~/.active-rstudio-document")
install.packages("dplyr")
install.packages("patchwork")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Seurat")
a
pbmc.data <- Read10X(data.dir = "data_Seurat/")
library(dplyr)
library(Seurat)
library(patchwork)
pbmc.data <- Read10X(data.dir = "data_Seurat/")
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)
pbmc
pbmc.data[c("CD3D", "TCL1A", "MS4A1"), 1:30]
dense.size <- object.size(as.matrix(pbmc.data))
dense.size
sparse.size <- object.size(pbmc.data)
sparse.size
dense.size/sparse.size
# The [[ operator can add columns to object metadata. This is a great place to stash QC stats
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
head(pbmc@meta.data, 5)
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
# FeatureScatter is typically used to visualize feature-feature relationships, but can be used
# for anything calculated by the object, i.e. columns in object metadata, PC scores etc.
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
#After removing unwanted cells from the dataset, the next step is to normalize the data. By default, we employ a global-scaling normalization method “LogNormalize” that normalizes the feature expression measurements for each cell by the total expression, multiplies this by a scale factor (10,000 by default), and log-transforms the result. In Seurat v5, Normalized values are stored in pbmc[["RNA"]]$data.
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000)
#pbmc <- NormalizeData(pbmc)
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(pbmc), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(pbmc)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot1 + plot2
all.genes <- rownames(pbmc)
pbmc <- ScaleData(pbmc, features = all.genes)
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
print(pbmc[["pca"]], dims = 1:5, nfeatures = 5)
VizDimLoadings(pbmc, dims = 1:2, reduction = "pca")
DimPlot(pbmc, reduction = "pca") + NoLegend()
DimHeatmap(pbmc, dims = 1, cells = 500, balanced = TRUE)
DimHeatmap(pbmc, dims = 1:15, cells = 500, balanced = TRUE)
ElbowPlot(pbmc)
pbmc <- FindNeighbors(pbmc, dims = 1:10)
pbmc <- FindClusters(pbmc, resolution = 0.5)
head(Idents(pbmc), 5)
pbmc <- RunUMAP(pbmc, dims = 1:10)
DimPlot(pbmc, reduction = "umap")
saveRDS(pbmc, file = "pbmc_tutorial.rds")
cluster2.markers <- FindMarkers(pbmc, ident.1 = 2)
head(cluster2.markers, n = 5)
cluster5.markers <- FindMarkers(pbmc, ident.1 = 5, ident.2 = c(0, 3))
head(cluster5.markers, n = 5)
pbmc.markers <- FindAllMarkers(pbmc, only.pos = TRUE)
# Load required libraries
library(Seurat)
library(ggplot2)
# Note: In an actual environment, you would use:
# spatial_data <- readRDS("data new 2.rds")
# Simulated example of loading and inspecting spatial transcriptomics data
spatial_data <- CreateSeuratObject(counts = matrix(rpois(1000, 2), ncol=10))
# Inspect data structure
str(spatial_data)
typeof(spatial_data)
# Quality control visualization
# Violin plot of nCount (number of counts per cell)
VlnPlot(spatial_data, features = c("nCount_RNA", "nFeature_RNA"))
# Spatial feature plot (would require actual spatial coordinates)
# SpatialFeaturePlot(spatial_data, features = c("feature_of_interest"))
# Note: In an actual environment, you would use:
spatial_data <- readRDS("data_new_2.rds")
# Quality control visualization
# Violin plot of nCount (number of counts per cell)
VlnPlot(spatial_data, features = c("nCount_RNA", "nFeature_RNA"))
library(Seurat)
library(ggplot2)
spatial_data <- readRDS("data_new_2.rds")
str(spatial_data)
typeof(spatial_data)
VlnPlot(spatial_data, features = c("nCount_RNA", "nFeature_RNA"))
spatial_data <- readRDS("data_new_2.rds")
str(spatial_data)
typeof(spatial_data)
VlnPlot(spatial_data, features = c("nCount_Spatial", "nFeature_Spatial"))
summary(spatial_data$nCount_Spatial)
summary(spatial_data$nFeature_Spatial)
length(Cells(spatial_data))
length(Features(spatial_data))
SpatialFeaturePlot(spatial_data, features = spatial_data@assays$SCT@var.features[1:3])
?SpatialFeaturePlot
